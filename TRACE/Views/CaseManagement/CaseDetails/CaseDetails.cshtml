@{
    ViewData["Title"] = "My Cases - Case No.";
}

<div class="crumbs">
    <a href="/dashboard">Dashboard</a> > <a href="javascript:history.back();">Case Management </a> > Case Title > Milestone
</div>

<div class="case-card-details shadow border-radius-5">
    <div class="case-details grid grid-four-fr gap-20" id="caseDetails">

    </div>
    @await Html.PartialAsync("Components/Loader/Mini-Loader")
</div>

<div class="grid gap-20 grid-cms">
    <div class="cms-nav">
        <ul>
            <li onclick="showTab('milestones')" class="active"><i class='bx bx-check-circle'></i> Milestones</li>
            <li onclick="showTab('activities')"><i class='bx bxs-calendar'></i> Activities/Events</li>
            <li onclick="showTab('documents')"><i class='bx bxs-file'></i> Documents</li>
            <li onclick="showTab('assignpersonnel')"><i class='bx bxs-user-check'></i> Assigned Personnel</li>
            <li onclick="showTab('relatedcases')"><i class='bx bxs-folder-open'></i> Related Cases</li>
            <li onclick="showTab('hearings')"><i class='bx bxs-briefcase'></i> Hearings</li>
            <li onclick="showTab('tasks')"><i class='bx bx-list-check'></i> Tasks</li>
            <li onclick="showTab('notes')"><i class='bx bxs-note'></i> Notes</li>
        </ul>
    </div>

    <div class="cms-wrap shadow border-radius-5">
        <div id="milestones" class="cms-content active">
            <h3>Milestones</h3>
            <div class="milestone-details">
                <span><strong>Case Status: </strong> <i>NOT PULLED YET</i></span>
                <span><strong>Case Age: </strong> <i id="caseage">NOT PULLED YET</i></span>
                <span><strong>Current Milestone Age: </strong> <i id="currentmilestoneage">NOT PULLED YET</i></span>
            </div>
            <div class="case-milestone-wrapper" >
                <div class="progress-container" id="casemilestone">
                    
                </div>

            </div>
            @await Html.PartialAsync("Components/Loader/Mini-Loader-2")
        </div>

        <div id="activities" class="cms-content">
            <h3>Activities/Events</h3>
            <table class="my-cases-table">
                <thead>
                    <tr>
                        <th>BY</th>
                        <th>DESCRIPTION</th>
                        <th>DATE</th>
                    </tr>
                </thead>
                <tbody id="caseeventbody">
                </tbody>
            </table>
            <div class="pagination flex h-center gap-10" id="caseEventpagination">
                <span>Current Page: </span>
                <select>
                    <option>1</option>
                    <option>2</option>
                    <option>3</option>
                </select>
                <span class="prev flex h-center"><i class='bx bx-chevron-left'></i></span>
                <span class="next flex h-center"><i class='bx bx-chevron-right'></i></span>
            </div>
        </div>

        <div id="documents" class="cms-content">
            <h3>Documents</h3>
        </div>

        <div id="assignpersonnel" class="cms-content">
            <div class="cdeets flex h-center space-between">
                <h3>Current Assigned Personnel</h3>
                <button>+ Assign Personnel</button>
            </div>
            <div class="nopaginationdiv">
                <table class="my-cases-table">
                    <thead>
                        <tr>
                            <th>OFFICER TYPE</th>
                            <th>ASSIGNED PERSONEL</th>
                            <th>DATE ASSIGNED</th>
                            <th>ASSIGNED BY</th>
                            <th>ACTIONS</th>
                        </tr>
                    </thead>
                    <tbody id="caseassignment">

                    </tbody>
                </table>
            </div>

            <div class="nopaginationdiv">
                <h3>Case Assignment History</h3>
                <table class="my-cases-table">
                    <thead>
                        <tr>
                            <th>PERSONNEL</th>
                            <th>DATE ASSIGNED</th>
                            <th>DATE REMOVED</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td data-label="PERSONNEL">sampleguy</td>
                            <td data-label="DATE ASSIGNED">03/09/2016</td>
                            <td data-label="DATE REMOVED">03/09/2016</td>
                        </tr>
                        <tr>
                            <td data-label="PERSONNEL">sampleguy</td>
                            <td data-label="DATE ASSIGNED">03/09/2016</td>
                            <td data-label="DATE REMOVED">03/09/2016</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            
        </div>

        <div id="relatedcases" class="cms-content">
            <div class="cdeets flex h-center space-between">
                <h3>Related Cases</h3>
                <button>+ Related Case</button>
            </div>
            
            <table class="my-cases-table">
                <thead>
                    <tr>
                        <th>CASE NO.</th>
                        <th>CASE TITLE</th>
                        <th>ACTION</th>
                    </tr>
                </thead>
                <tbody>
                    <!--ALDRIN: Please allow only 5 rows per page and use pagination-->
                    <tr>
                        <td data-label="CASE NO.">2016-0080-CC</td>
                        <td data-label="CASE TITLE">SAMPLE Altered Connection</td>
                        <td data-label="ACTION" class="actions">
                            <i class='bx bxs-x-circle' title="Archive"></i>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div id="hearings" class="cms-content">
            <div class="cdeets flex h-center space-between">
                <h3>Hearings</h3>
                <button>+ New Hearing</button>
            </div>
            <table class="my-cases-table">
                <thead>
                    <tr>
                        <th>HEARING CATEGORY</th>
                        <th>DATE AND TIME</th>
                        <th>VENUE</th>
                        <th>TYPE</th>
                        <th>REMARKS</th>
                        <th>ACTION</th>
                    </tr>
                </thead>
                <tbody id="casehearing">
                </tbody>
            </table>
        </div>

        <div id="tasks" class="cms-content">
            <div class="cdeets flex h-center space-between">
                <h3>Tasks</h3>
                <button>+ Assign New Task</button>
            </div>
            <div class="nopaginationdiv">
                <h4>Pending Tasks</h4>
                <table class="my-cases-table">
                    <thead>
                        <tr>
                            <th>TASKED TO</th>
                            <th>DETAILS</th>
                            <th>TARGET DATE</th>
                            <th>ACTION</th>
                        </tr>
                    </thead>
                    <tbody id="pendingtask">
                    </tbody>
                </table>
            </div>

            <div class="nopaginationdiv">
                <h4>Completed Tasks</h4>
                <table class="my-cases-table">
                    <thead>
                        <tr>
                            <th>TASKED TO</th>
                            <th>DETAILS</th>
                            <th>TARGET DATE</th>
                            <th>COMPLETED DATE</th>
                        </tr>
                    </thead>
                    <tbody id="completedTask">
                    </tbody>
                </table>
            </div>
        </div>

        <div id="notes" class="cms-content">
            <div class="cdeets flex h-center space-between">
                <h3>Notes</h3>
                <button>+ New Note</button>
            </div>
            <table class="my-cases-table">
                <thead>
                    <tr>
                        <th>TITLE</th>
                        <th>DESCRIPTION</th>
                        <th>DATE</th>
                        <th>ACTION</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td data-label="TITLE">IMPORTANT READ!</td>
                        <td data-label="DESCRIPTION">Please read the comments in source code left by FE developer</td>
                        <td data-label="DATE">03/07/2025</td>
                        <td data-label="ACTION" class="actions">
                            <i class='bx bxs-edit' title="Edit"></i>
                            <i class='bx bxs-x-circle' title="Archive"></i>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

    </div>
</div>
<script>
    var caseId1 = 0;
 document.addEventListener('DOMContentLoaded', function () {
        // Get the URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        const caseId = urlParams.get('id');
         caseid1 = caseId;
        if (caseId) {
            fetchCaseDetails(caseId);
            fetchCaseEvent(caseId);
            fetchCaseAssignmentWithErcId(caseId);
            fetchCaseHearingWithErcId(caseId);
            fetchCaseTaskWithErcId(caseId);
            
        } else {
            console.error('No case ID found in URL.');
        }
    });

    function fetchCaseEvent(caseId) {
        const caseeventbody = document.getElementById('caseeventbody');
        fetch(`/CaseEvent/GetCaseEventByErcID?id=${caseId}`)
            .then(response => {
                if (!response.success) {
                    caseeventbody.innerHTML = `
                                    <tr>
                                          <td >Data Not Found</td>
                                    </tr>
                                `;
                }
                return response.json();
            })
            .then(result => {
                if (!result.success) {
                    console.error('No events found:', result.message);
                    return;
                }

                const data = result.data;
              
                if (!caseeventbody) {
                    console.error('Table body not found');
                    return;
                }

                caseeventbody.innerHTML = ''; // Clear existing rows

                data.forEach(event => {
                 
                    const row = `
                        <tr>
                            <td data-label="BY">${event.userID || 'N/A'}</td>
                            <td data-label="DESCRIPTION">${event.eventDescription || 'N/A'}</td>
                            <td data-label="DATE">${event.eventDatetime || 'N/A'}</td>
                        </tr>
                    `;
                    caseeventbody.innerHTML += row;
                });
            })
            .catch(error => {
                console.error('Error fetching case details:', error);
            });
    }
    function fetchCaseTaskWithErcId(caseId) {
        const caseassignment = document.getElementById('pendingtask');
        const caseassignment1 = document.getElementById('completedTask');

        // Clear the existing content
        caseassignment.innerHTML = '';
        caseassignment1.innerHTML = '';

        fetch(`/CaseTask/GetCaseTaskByErcID?id=${caseId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(result => {
                if (!result.success || !result.data || result.data.length === 0) {
                    caseassignment.innerHTML = `<tr><td colspan="4">No Pending Tasks Found</td></tr>`;
                    caseassignment1.innerHTML = `<tr><td colspan="4">No Completed Tasks Found</td></tr>`;
                    return;
                }

                result.data.forEach(event => {
                    const row = `
                        <tr>
                            <td data-label="TASKED TO">${event.UserID || 'N/A'}</td>
                            <td data-label="DETAILS">${event.Task || 'N/A'}</td>
                            <td data-label="TARGET DATE">${event.TargetCompletionDate || 'N/A'}</td>
                            <td data-label="ACTION" class="actions">
                                <i class='bx bxs-check-circle' title="Mark as complete"></i>
                                <i class='bx bxs-x-circle' title="Pin task"></i>
                            </td>
                        </tr>
                    `;

                    // Check if TargetCompletionDate exists
                    if (event.ActualCompletionDate) {
                        caseassignment1.innerHTML += row; // Completed Task
                    } else {
                        caseassignment.innerHTML += row; // Pending Task
                    }
                });
            })
            .catch(error => {
                console.error('Error fetching case details:', error);
                caseassignment.innerHTML = `<tr><td colspan="4">Error fetching data</td></tr>`;
                caseassignment1.innerHTML = `<tr><td colspan="4">Error fetching data</td></tr>`;
            });
    }

    function fetchCaseAssignmentWithErcId(caseId) {
        const caseassignment = document.getElementById('caseassignment');
        fetch(`/CaseAssignment/GetCaseAssignmentByErcID?id=${caseId}`)
            .then(response => {
                if (!response.success) {
                    caseassignment.innerHTML = `
                                        <tr>
                                              <td >Data Not Found</td>
                                        </tr>
                                    `;
                }
                return response.json();
            })
            .then(data => {
         
                if (data.length > 0) {
                    const caseData = data[0];
                    
                    // Update values dynamically
                
                    data.forEach(event => {

                        const row = `
                              <tr>
                                        <td data-label="OFFICER TYPE">${event.OfficerType}</td>
                                        <td data-label="ASSIGNED PERSONEL">${event.UserID}</td>
                                            <td data-label="DATE ASSIGNED">${event.DateAssigned}</td>
                                            <td data-label="ASSIGNED BY">${event.AssignedBy}</td>
                                <td data-label="ACTION" class="actions">
                                    <i class='bx bxs-x-circle' title="Archive"></i>
                                </td>
                            </tr>
                        `;
                        caseassignment.innerHTML += row;
                    });
                  
                } else {
                    caseassignment.innerHTML = `
                            <tr>
                                  <td >Data Not Found</td>
                            </tr>
                        `;
                }

            })
            .catch(error => {
                console.error('Error fetching case details:', error);
            });
    }

    function fetchCaseHearingWithErcId(caseId) {
        fetch(`/Hearing/GetHearingByErcID?id=${caseId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {

                if (data.length > 0) {
                    const caseData = data[0];

                    // Update values dynamically
                    const casehearing = document.getElementById('casehearing');
                    data.forEach(event => {

                        const row = `
                                       <tr>
                                                        <td data-label="HEARING CATEGORY">${event.HearingCategory}</td>
                                                                    <td data-label="DATE AND TIME">${event.HearingDate} ${event.Time}</td>
                                                            <td data-label="VENUE">${event.HearingVenue}</td>
                                                                        <td data-label="TYPE">${event.HearingTypeDescription} (${event.HearingType})</td>
                                                            <td data-label="REMARKS">${event.Remarks}</td>
                                                <td data-label="ACTION" class="actions">
                                                    <i class='bx bxs-edit' title="Edit"></i>
                                                    <i class='bx bxs-x-circle' title="Archive"></i>
                                                </td>
                                            </tr>
                            `;
                        casehearing.innerHTML += row;
                    });
                } else {
                    casehearing.innerHTML = `
                                <tr>
                                      <td >Data Not Found</td>
                                </tr>
                            `;
                }

            })
            .catch(error => {
                console.error('Error fetching case details:', error);
            });
    }
    function calculateDays(dateFiled) {
        const filedDate = new Date(dateFiled);
        const currentDate = new Date();
       
        // Calculate the difference in milliseconds
        const timeDifference = currentDate - filedDate;

        // Convert milliseconds to days
        const daysDifference = Math.floor(timeDifference / (1000 * 60 * 60 * 24));
      
        return daysDifference;
    }
    function calculateDays1(dateFiled) {
        console.log(dateFiled)
        const filedDate = new Date(dateFiled);

        if (isNaN(filedDate.getTime())) {
            console.error('Invalid date format');
            return;
        }

        const currentDate = new Date();

        // Calculate the difference in milliseconds
        const timeDifference = currentDate.getTime() - filedDate.getTime();

        // Convert milliseconds to days
        const daysDifference = Math.floor(timeDifference / (1000 * 60 * 60 * 24));

        console.log(`Days since filed: ${daysDifference} days`);
        return daysDifference;
    }

    function fetchCaseDetails(caseId) {
        fetch(`/CaseDetails/GetCaseDetails?id=${caseId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.length > 0) {
                    const caseData = data[0];
                    displayCaseMilestone(caseData.CaseCategoryID);
                    // Update values dynamically
                    const caseDetailsDiv = document.getElementById('caseDetails');
                    const caseage = document.getElementById('caseage');
                    caseage.innerHTML = calculateDays(caseData.DateFiled) + "Days";
                    caseDetailsDiv.innerHTML = `
                      <div>
                          <span><strong>ERC Case No.: </strong> <i>${caseData.CaseNo}</i></span>
                          <span><strong>Case Title: </strong> <i>${caseData.Title}</i></span>
                          <span><strong>Case Category: </strong> <i>${caseData.Category}</i></span>
                      </div>
                      <div>
                          <span><strong>Case Nature: </strong> <i>${caseData.CaseNature}</i></span>
                          <span><strong>Date Filed: </strong> <i>${caseData.DateFiled}</i></span>
                          <span><strong>Date Docketed: </strong> <i>${caseData.DateDocketed}</i></span>
                      </div>
                      <div>
                              <span><strong>Docketed By: </strong> <i>${caseData.DocketedBy ?? 'N/A'}</i></span>
                                  <span><strong>Applicant: </strong> <i>${caseData.CompanyName ?? 'N/A'}</i></span>
                              <span><strong>Respondent: </strong> <i>${caseData.CorrespondentName ?? 'No Data Yet'}</i></span>
                      </div>
                      <div>
                          <span><strong>No. of Folders: </strong> <i>${caseData.NoOfFolders ?? 'N/A'}</i></span>
                          <span><strong>Date Approved: </strong> <i>${caseData.DatetimeApproved ?? 'N/A'}</i></span>
                          <span><strong class="green-txt">${caseData.CaseStatus}</strong></span>
                      </div>
                    `;
                } else {
                    alert('Case not found!');
                }
            })
            .catch(error => {
                console.error('Error fetching case details:', error);
            });
    }


    async function milestoneIsAchieved(milestoneId) {
        const urlParams = new URLSearchParams(window.location.search);
        const caseId = urlParams.get('id');
        try {
            const response = await fetch(`/CaseMilestone/CheckMilestoneIsAchieved?erccaseId=${caseId}&casemilestoneId=${milestoneId}`);

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
          
            const data = await response.json();
            const currentmilestone = document.getElementById('currentmilestoneage');
            currentmilestone.innerHTML = calculateDays1(data[0].DatetimeAchieved) + "Days";
            return data.length > 0; // Return true if data exists, false otherwise
        } catch (error) {
            console.error('Error fetching milestone data:', error);
            return false; // Return false on error
        }
    }

    async function displayCaseMilestone(caseId) {
        try {
            const response = await fetch(`/CaseMilestone/GetMilestoneOfCases?id=${caseId}`);

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            const data = await response.json();
            const tableBody = document.getElementById('casemilestone');
            if (!tableBody) {
                console.error('Table body not found.');
                return;
            }

            tableBody.innerHTML = ''; // Clear previous data

            for (const item of data) {
                
                const isAchieved = await milestoneIsAchieved(item.CaseMilestoneID);
               
                
             
                const row = isAchieved
                    ? `
                        <div class="step completed">
                            <div class="circle">✔</div>
                            <div class="label">${item.Milestone}</div>
                            <div class="progress-line active"></div>
                        </div>
                    `
                    : `
                        <div class="step active">
                            <div class="progress-line active"></div>
                            <div class="circle"></div>
                            <div class="label">${item.Milestone}</div>
                            <div class="progress-line"></div>
                        </div>
                    `;

                tableBody.innerHTML += row;
            }
        } catch (error) {
            console.error('Error fetching case details:', error);
        }
    }




    


</script>
<script src="~/js/CaseDetails.js"></script>