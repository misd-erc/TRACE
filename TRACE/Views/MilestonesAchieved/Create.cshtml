@model TRACE.Models.MilestonesAchieved

@{
    ViewData["Title"] = "Create";
}

<div class="crumbs">
    <a href="javascript:history.back();">Go Back</a> > Upload Attachments & Update Milestone
</div>

<form id="createForm" asp-action="Create" method="post">
    <div class="main-head-div flex h-center space-between">
        <div class="title-div">
            <h3>UPLOAD ATTACHMENTS AND UPDATE MILESTONE</h3>
            <p>This page is for uploading attachments and updating milestone achieved for the selected erc case</p>
        </div>

        <div class="btn-div">
            <input type="submit" value="UPLOAD FILES" class="btn btn-primary" />
        </div>
    </div>
    <div class="case-card shadow border-radius-5">
        <div class="form-div  create-lc">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group" style="display:none">
                <label asp-for="ErccaseId" class="control-label"></label>
                <input asp-for="ErccaseId" type="hidden" class="form-control" id="ErccaseId" />
            </div>
            <div class="form-group">
                <label asp-for="CaseMilestoneId" class="control-label"></label>
                @Html.DropDownListFor(model => model.CaseMilestoneId, (SelectList)ViewData["CaseMilestoneId"], "Select milestone", new { @class = "form-control", id = "_milestone" })
            </div>
            <div class="form-group" style="display:none">
                <label asp-for="PercentAchieved" class="control-label"></label>
                <input asp-for="PercentAchieved" class="form-control" />
                <span asp-validation-for="PercentAchieved" class="text-danger"></span>
            </div>
            <div class="case-card shadow border-radius-5">
                <div class="form-div  create-lc">
                    <div class="">

                        <div class="form-input-div uploadfileclass">
                            <input type="file" class="form-control" id="fileUpload" multiple />
                            <label for="fileUpload">📁 Choose a file</label>
                            <i class="helper">pdf, doc, csv, xlsx</i>
                            <p id="fileNames"></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        const fileInput = document.getElementById("fileUpload");
        const fileNamesDisplay = document.getElementById("fileNames");
        
        var files;
        var ercid = 0;
        fileInput.addEventListener("change", function () {
             files = Array.from(fileInput.files);
            if (files.length > 0) {
                fileNamesDisplay.innerHTML = files.map(f => f.name).join("<br>");
            } else {
                fileNamesDisplay.textContent = "No files selected.";
            }
        });

        $(document).ready(function () {
            $("#createForm").submit(function (event) {
                event.preventDefault();

                // Prepare form data including files
                let formData = new FormData(this);

                // Append files to the form data
                files.forEach((file, index) => {
                    formData.append("files", file);
                   
                });

                $.ajax({
                    url: $(this).attr("action"),
                    type: "POST",
                    data: formData,
                    processData: false, // Required for file uploads
                    contentType: false, // Required for file uploads
                    success: function (response) {
                        if (response.success) {
                            Swal.fire({
                                title: "Success!",
                                text: response.message,
                                icon: "success",
                                confirmButtonText: "OK",
                                customClass: {
                                    popup: "swal2-popup",
                                    confirmButton: "swal2-confirm"
                                }
                            }).then(() => {
                                // Call the PostCaseBlobDocument API with the `files` array
                                callPostCaseBlobDocumentAPI(files);  // Pass the `files` array here
                                $("#createForm")[0].reset();
                            });
                        } else {
                            Swal.fire({
                                title: "Error!",
                                text: response.message,
                                icon: "error",
                                confirmButtonText: "Try Again"
                            });
                        }
                    },
                    error: function () {
                        Swal.fire({
                            title: "Oops!",
                            text: "Something went wrong. Please try again.",
                            icon: "error",
                            confirmButtonText: "OK",
                            customClass: {
                                popup: "swal2-popup",
                                confirmButton: "swal2-confirm"
                            }
                        });
                    }
                });
            });
        });

        // Function to call the PostCaseBlobDocument API with the files array
        function callPostCaseBlobDocumentAPI(files) {
            const urlParams = new URLSearchParams(window.location.search);
            const erccaseId = urlParams.get('id');
            const milestone = document.getElementById("_milestone");
            const formData = new FormData();

            formData.append("CaseNumber", erccaseId);
            formData.append("milestone", milestone.value);

            files.forEach(file => {
                formData.append("Files", file);
            });

            $.ajax({
                url: '/MilestonesAchieved/PostCaseBlobDocument',
                type: "POST",
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    Swal.fire({
                        title: "File Uploaded!",
                        text: "Files have been uploaded successfully.",
                        icon: "success",
                        confirmButtonText: "OK"
                    });
                },
                error: function (xhr) {
                    console.log(xhr.responseText); // <--- To see the real server error in console
                    Swal.fire({
                        title: "Oops!",
                        text: "Something went wrong while calling the PostCaseBlobDocument API.",
                        icon: "error",
                        confirmButtonText: "OK"
                    });
                }
            });
        }
        document.addEventListener('DOMContentLoaded', function () {
            // Get the URL parameter
            const urlParams = new URLSearchParams(window.location.search);
            const erccaseId = urlParams.get('id');
            

            // Set the hidden input field value if erccaseId exists
            if (erccaseId) {
                const inputElement = document.getElementById('ErccaseId');

                if (inputElement) {
                    inputElement.value = erccaseId;
                } else {
                    console.error('ErccaseId input not found');
                }
            }
        });
    </script>
}

