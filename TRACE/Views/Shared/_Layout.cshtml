@using TRACE.Helpers
@inject CurrentUserHelper CurrentUser

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>@ViewData["Title"] - ICDMS</title>
    <link rel="icon" type="image/x-icon" href="~/images/ERC-LOGO.png">

    <!--Ol reliable google font-->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">

    <!--boxicons-->
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link href='https://cdn.boxicons.com/fonts/basic/boxicons.min.css' rel='stylesheet'>

    <!--chart-->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <!--SWEET ALERTO-->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <!--SELECT2-->
    <link href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>


    <!--Main CSS-->
    <link rel="stylesheet" href="~/css/drin.css" asp-append-version="true" />

    <!--WE DONT USE BOOTSTRAP I AM THE BOOTSTRAP-->
    @* <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" /> *@
    @* <link rel="stylesheet" href="~/TRACE.styles.css" asp-append-version="true" /> *@
</head>
<body>
    @Html.AntiForgeryToken();
    <div class="loader-overlay" id="loader">
        <div class="loader-spinner"></div>
        <p>Loading...</p>
    </div>
    <div class="upper-header grid grid-header h-center gap-20">
        <div class="grid-menu-div">
            <i class='bx bxs-grid' onclick="toggleWaffleMenu()"></i>
            <div class="waffle-dropdown" id="waffleDropdown">
                <div class="waffle-sites grid grid-three-fr gap-20">
                    <a href="https://www.erc.gov.ph" target="_blank"><span><img class="waffle-img" src="/images/ERC-LOGO.png"> ERC Website</span></a>
                    <a href="https://buyyourelectricity.erc.ph" target="_blank"><span><img class="waffle-img" src="/images/BYE-logo.webp"> BYE Website</span></a>
                    <a href="https://outlook.office.com/mail/erc.ph" target="_blank"><span><i class='bx bx-mail-send'></i> ERC Mail</span></a>
                    <a href="https://energyregcomm.sharepoint.com/sites/Compendium/" target="_blank"><span><i class='bx bxs-file-export'></i> E-Share</span></a>
                    <a href="https://brscs.erc.gov.ph" target="_blank"><span><i class='bx bxs-credit-card-alt'></i> BRSCS</span></a>
                    <a href="https://ccts.erc.ph" target="_blank"><span><i class='bx bxs-message-square-detail'></i> CCTS</span></a>
                    <a href="https://ofas.erc.ph" target="_blank"><span><i class='bx bxs-user-plus'></i> ERCify/OFAS</span></a>
                    <a href="https://urr.erc.ph" target="_blank"><span><i class='bx bxs-folder-open'></i> OURRS</span></a>
                    <a href="https://prefiling.erc.ph" target="_blank"><span><i class='bx bxs-map'></i> Online Prefiling</span></a>
                    <a href="https://evoss-dashboard.erc.local" target="_blank"><span><i class='bx bxs-dashboard'></i> EVOSS Dashboard</span></a>
                    <a href="https://crem.erc.ph" target="_blank"><span><i class='bx bxs-store'></i> CREM-MRS</span></a>


                </div>
            </div>
        </div>
        <div class="logo-div">
            <h3>ICDMS</h3>
        </div>
        <div class="search-bar-div flex">
            <div class="search-design flex h-center gap-10">
                <i class='bx bx-search'></i>
                <input type="text" id="searchInput" placeholder="Search" autocomplete="off" />
            </div>
            <div class="search-results" id="searchResults"></div>
        </div>
        <div class="menu-user-div flex h-center gap-10">
            <!--Notification-->
            
            <div class="profile-menu-wrapper">
                <i class='bx bxs-bell' onclick="toggleNotifMenu()"></i>
                <div class="notif-dropdown" id="notifDropdown">
                    <ul class="notif-list" id="notifList">
                    </ul>
                    <div class="see-more-notif border-radius-5" onclick="location.href='@Url.Action("Notifications", "NotificationManagement")'"><strong>See All Notifiations</strong></div>
                </div>
            </div>

            <!--Settings-->
            <i class='bx bxs-cog' onclick="location.href='@Url.Action("Settings", "Home")'"></i>

            <!--Help-->
            <i class='bx bxs-help-circle'></i>

            <!--Profile-->
            <div class="profile-menu-wrapper">
                <span class="profile-menu" onclick="toggleProfileMenu()">
                    <i title="@CurrentUser.Email">@(GetInitials(CurrentUser.Name))</i>
                </span>
                <div class="profile-dropdown" id="profileDropdown">
                    <div class="user-info">
                        <span class="user-name" id="currentusername">@CurrentUser.Name</span>
                        <span class="user-email">@CurrentUser.Email</span>
                        <span class="user-department">@await CurrentUser.GetDepartmentAsync()</span>
                    </div>
                    @* <a href="#"><span class='bx bxs-user-circle'></span> Account Settings</a> *@
                    <a id="logout-link"><span class='bx bx-log-out'></span> Logout</a>
                    @* href="@Url.Action("Logout", "External")" *@
                </div>
            </div>
        </div>

    </div>
    <header class="flex gap-10 shadow">
        <div class="upper">
            <div class="main-menu">
                <ul>
                    <li onclick="location.href='@Url.Action("Dashboard", "Home")'">
                        <img src="~/images/icons/dashboard.png" />
                        <span>Dashboard</span>
                    </li>
                    <li class="has-dropdown" onclick="toggleCollapse(event)">
                        <img src="~/images/icons/case.png" />
                        <span>Case Management <i class='bx bx-chevron-down'></i></span>
                    </li>
                    <ul class="cads-dropdown">
                        <li onclick="location.href='@Url.Action("AllCases", "CaseManagement")'">All Cases</li>
                        @await Component.InvokeAsync("MyCasesLink")
                    </ul>
                    <li onclick="location.href='@Url.Action("DocumentManagement", "DocumentManagement")'">
                        <img src="~/images/icons/document.png" />
                        <span>Document Management</span>
                    </li>
                    <li onclick="location.href='@Url.Action("Hearings", "Hearings")'">
                        <img src="~/images/icons/hearing.png" />
                        <span>Hearings</span>
                    </li>
                    <li onclick="location.href='@Url.Action("ContentManagement", "ContentManagement")'">
                        <i class='bx bxs-book-content'></i>
                        <span>Content Management</span>
                    </li>
                    <li onclick="location.href='@Url.Action("Index", "Users")'">
                        <i class='bx bxs-user-detail'></i>
                        <span>User Management</span>
                    </li>
                    <li onclick="location.href='@Url.Action("UserLogs", "UserLogs")'">
                        <i class='bx bxs-user-circle'  ></i>
                        <span>User Audit</span>
                    </li>
                    <li class="has-dropdown" onclick="toggleCollapse(event)">
                        <i class='bxr bx-file-report'></i>
                        <span>Reports <i class='bx bx-chevron-down'></i></span>
                    </li>
                    <ul class="cads-dropdown">
                        <li onclick="location.href='@Url.Action("GenerateReports", "Reports")'">Generate Case Reports</li>
                    </ul>
                </ul>
            </div>
        </div>
    </header>

    
    <div class="container">
        <main role="main">
            @RenderBody()
        </main>
    </div>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    @* <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script> *@
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="~/js/drin-theme.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>


@functions { 
    string GetInitials(string fullName)
    {
        if (string.IsNullOrWhiteSpace(fullName)) return "NA";

        var parts = fullName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length == 1)
        {
            return parts[0][0].ToString().ToUpper();
        }
        else
        {
            var firstInitial = parts[0][0];
            var lastInitial = parts[^1][0];
            return $"{firstInitial}{lastInitial}".ToUpper();
        }
    }
}

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="~/js/userManagement.js"></script>
<script>
    let inactivityTimer;
    const _2Hrs = 2 * 60 * 60 * 1000;
    const _5Mins = 5 * 60 * 1000;
        function resetLogoutTimer() {
        clearTimeout(inactivityTimer);
        inactivityTimer = setTimeout(() => {
            Swal.fire({
                title: "You are Inactive.",
                html: "You will be automatically logged out in <b></b> seconds if no activity is detected.",
                timer: _5Mins,
                icon: "warning",
                timerProgressBar: true,
                confirmButtonText: "Keep me logged in",
                showConfirmButton: true,
                allowOutsideClick: false,
                customClass: {
                    popup: "swal2-popup",
                    confirmButton: "swal2-confirm"
                },
                didOpen: () => {
                    const timer = Swal.getPopup().querySelector("b");
                    timerInterval = setInterval(() => {
                        const remainingTime = Math.ceil(Swal.getTimerLeft() / 1000);
                        timer.textContent = `${remainingTime}`;
                    }, 1000);
                },
                willClose: () => {
                    clearInterval(timerInterval);
                },
            }).then((result) => {
                if (result.isConfirmed) {
                    console.log("User chose to stay logged in.");
                } else if (result.dismiss === Swal.DismissReason.timer) {
                    window.location.href = '@Url.Action("Logout", "External")';
                }
            });
        }, _2Hrs);
    }


    $(document).ready(function () {
        $("#searchInput").on("input", function () {
            var query = $(this).val().trim();

            if (query === "") {
                $("#searchResults").empty().hide();
                return;
            }

            $.ajax({
                url: "/Search/SearchModules",
                type: "GET",
                data: { query: query },
                success: function (data) {

                    if (!data || data.length === 0) {
                        $("#searchResults").html("<p>No results found</p>").show();
                        return;
                    }

                    var moduleResults = "";
                    var caseResults = "";

                    data.forEach(function (item) {

                        if (item.type === "Case") {
                            let caseNumber = item.name.replace(/<b>Case:<\/b>\s*/, '');
                            caseResults += `<li><a href="${item.link}">${caseNumber}</a></li>`;
                        } else if (item.type === "Module") {
                            moduleResults += `<li><a href="${item.link}">${item.name}</a></li>`;
                        }
                    });

                    var resultsHtml = "<div class='search-dropdown'>";
                    if (caseResults !== "") {
                        resultsHtml += "<h3 class='result-header'>Case Numbers:</h3><ul class='case-results'>" + caseResults + "</ul>";
                    }
                    if (moduleResults !== "") {
                        resultsHtml += "<h3 class='result-header'>Are you looking for:</h3><ul class='module-results'>" + moduleResults + "</ul>";
                    }
                    resultsHtml += "</div>";

                    $("#searchResults").html(resultsHtml).show();
                },
                error: function (xhr, status, error) {
                    console.error("AJAX Error:", status, error);
                    console.error("Response Text:", xhr.responseText);
                    $("#searchResults").html("<p>There was an error fetching search results.</p>").show();
                }
            });

        });

        $(document).on("click", function (e) {
            if (!$(e.target).closest(".search-bar-div").length) {
                $("#searchResults").hide();
            }
        });
    });

    document.addEventListener("DOMContentLoaded", async function () {
        const userStatus = await createUser();

        if (userStatus === "created") {
            await delay(500); // wait if user was just created
        }

        if (userStatus !== "error") {
            fetchNotifications();
            setInterval(fetchNotifications, 5000);
        } else {
            console.warn("Notifications skipped due to user creation error.");
        }

        document.getElementById('logout-link').addEventListener("click", function() {
            Swal.fire({
                title: "Logout?",
                text: "Are you sure you want to logout?",
                icon: "question",
                customClass: {
                    popup: "swal2-popup",
                    confirmButton: "swal2-confirm"
                },
                confirmButtonColor: "#3085d6",
                showDenyButton: true,
                confirmButtonText: "Yes, log me out",
                denyButtonText: "No, stay logged in"
            }).then((result) => {
                if (result.isConfirmed) {
                   window.location.href = '@Url.Action("Logout", "External")'
                }
            });
        })
       
        document.addEventListener('click', resetLogoutTimer);

        resetLogoutTimer();
    });

    async function createUser() {
        const emailElement = document.querySelector('.user-email');
        const email = emailElement?.textContent.trim() || '';
        const username = email.split('@@')[0];

        const user = {
            Id: 0,
            Email: email,
            UserCategory: "Staff",
            IsEmailNotif: true,
            Fullname: document.querySelector('.user-name')?.textContent.trim(),
            Designation: "TBD",
            Department: document.querySelector('.user-department')?.textContent.trim(),
            IsSystemNotif: true,
            IsArchive: false,
            Username: username
        };

        try {
            const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
            const token = tokenElement ? tokenElement.value : '';

            const response = await fetch('/Users/Create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify(user)
            });

            const result = await response.json();

            // Handle different responses
            if (response.ok) {
                return result?.wasCreated === true ? "created" : "exists"; // adjust based on your backend
            } else if (response.status === 409) {
                return "exists"; // user already exists
            } else {
                console.error('Create user failed:', result);
                return "error";
            }
        } catch (error) {
            console.error('Create user error:', error);
            return "error";
        }
    }

    async function fetchNotifications() {
        try {
            const response = await fetch('/Notification/getHeaderNotification');
            const notifications = await response.json();

            const notifList = document.getElementById('notifList');
            const bellIcon = document.querySelector('.bxs-bell');

            notifList.innerHTML = '';

            // Filter only unarchived notifications
            const unarchivedNotifications = notifications.filter(notif => !notif.isArchived);

            const hasUnread = unarchivedNotifications.some(notif => notif.isRead === false);
            if (hasUnread) {
                bellIcon.classList.add('has-unread');
            } else {
                bellIcon.classList.remove('has-unread');
            }

            if (unarchivedNotifications.length === 0) {
                notifList.innerHTML = `<li class="no-notiflist"><span class="no-notif">No notifications available.</span></li>`;
                return;
            }

            unarchivedNotifications.forEach(notif => {
                const li = document.createElement('li');
                li.classList.toggle('unread', notif.isRead === false);
                li.classList.toggle('bold', notif.isRead === false);

                li.innerHTML = `
                    <span class="ndesc">${notif.message} <i class='bx ${notif.isRead ? 'bxs-envelope-open' : 'bxs-envelope'} notif-icon'></i></span>
                    <span class="ndate">${formatDate(notif.createdAt)}</span>
                `;

                li.addEventListener('click', async () => {
                    try {
                        await fetch('/Notification/MarkAsRead', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(notif.notificationID)
                        });

                        window.location.href = `/CaseDetails?id=${notif.caseID}`;
                    } catch (error) {
                        console.error('Failed to mark notification as read:', error);
                        window.location.href = `/CaseDetails?id=${notif.caseID}`;
                    }
                });

                notifList.appendChild(li);
            });

        } catch (error) {
            console.error('Error loading notifications:', error);
        }
    }

    function formatDate(dateString) {
        const date = new Date(dateString);
        if (isNaN(date)) return dateString;
        return date.toLocaleString('en-US', {
            day: '2-digit', month: 'short', year: 'numeric',
            hour: '2-digit', minute: '2-digit'
        });
    }

    function toggleNotifMenu() {
        const dropdown = document.getElementById('notifDropdown');
        dropdown.classList.toggle('show');
        fetchNotifications();
    }

</script>
<script src="~/js/FormInputValidation.js"></script>